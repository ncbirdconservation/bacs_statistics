fit<- glm(BACS_BIN~FBA + FFIRE+ FWIRE+FBARE, fit_win <- glm(BACS_BIN~FBA+FFIRE+FWIRE+FBARE, data=habq_factors, family=binomial())
fit_win <- glm(BACS_BIN~FBA+FFIRE+FWIRE+FBARE, data=habq_factors, family=binomial())
summary(fit_win)
write.csv("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQualityRExport.csv", row.names=1)
write.csv(habq_survey, file="C:/data/@projects/bacs_surveys/analysis/heat_map/HabQualityRExport.csv", row.names=1)
write.csv(habq_survey, file="C:/data/@projects/bacs_surveys/analysis/heat_map/HabQualityRExport.csv")
factors <- expand.grid(habq_survey$FBA, habq_survey$FFIRE, habq_survey$FWIRE, habq_survey$FBARE)
factors <- expand.grid(habq_survey$BA, habq_survey$FIRE, habq_survey$WIRE, habq_survey$BARE)
ddply(habq_survey, .(FBA, FFIRE, FWIRE, FBARE))
expand.grid(c("00","01","10"),c("00","01","10"))
expand.grid(c("00","01","10"),c("00","01","10"),c("00","01","10"),c("00","01","10"))
write.csv(expand.grid(c("00","01","10"),c("00","01","10"),c("00","01","10"),c("00","01","10"), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/HabQualFactors.csv")
)
write.csv(expand.grid(c("00","01","10"),c("00","01","10"),c("00","01","10"),c("00","01","10")), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/HabQualFactors.csv")
plot(jitter(habq_survey$BACS_BIN),jitter(habq_survey$BA))
hist(habq_survey$BA)
hist(habq_survey$FIRE)
hist(habq_survey$WIRE)
hist(habq_survey$BARE)
boxplot(TOTBACS~BA, data=habq_survey, main="Stand Density (BA) and Num BACS")
pairs(~TOTBACS+HabQIndex+BA+FIRE+WIRE+BARE, data=habq_survey, main="Habitat Variables & BACS Detections")
pairs(~TOTBACS+HabQIndex+jitter(BA)+jitter(FIRE)+jitter(WIRE)+jitter(BARE), data=habq_survey, main="Habitat Variables & BACS Detections")
pairs(~TOTBACS+HabQIndex+jitter(BA)+jitter(FIRE)+jitter(WIRE)+jitter(BARE), data=habq_survey, main="Habitat Variables & BACS Detections")
habq_test<-habq_survey
habq$BA <- ifelse(habq_test$BA<=1,0,1)
habq_test$BA <- ifelse(habq_test$BA<=1,0,1)
head(habq_test, n=20)
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<1,0,1))
fit_full <- glm(BACS_BIN~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=binomial())
summary(fit_full) #display results
#controversial model comparison - stepwise variable selection based on AIC values
library(MASS)
step <- stepAIC(fit_full, direction="both")
pfit_full <- glm(TOTBACS~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=poisson())
summary(pfit_full) #display results
f2<- c("0","1")
write.csv(expand.grid(f2, f2, f2, f2, f2, f2, f2), file="C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality2Factor.csv")
write.csv(fit_full, file=C:/data/@projects/bacs_surveys/analysis/heat_map/habq_2f_full_coeff.csv")
write.csv(fit_full, file="C:/data/@projects/bacs_surveys/analysis/heat_map/habq_2f_full_coeff.csv")
write.csv(fit_full$coefficients, file="C:/data/@projects/bacs_surveys/analysis/heat_map/habq_2f_full_coeff.csv")
write.csv(fit_full$summary, file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_2f_full_coeff.csv")
write.csv(coeff(summary(fit_full)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_2f_full_coeff.csv")
write.csv(coefficients(summary(fit_full)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_2f_full_coeff.csv")
q()
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
fit_full <- glm(BACS_BIN~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=binomial())
summary(fit_full) #display results
habq <- read.table("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality.csv", header=TRUE, sep=",")
habq["BACS_BIN"] <- ifelse(habq$TOTBACS > 0, 1,0)
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURVEY==0),]
#logistic regression
fit <- glm(BACS_BIN~HabQIndex, data=habq_survey, family=binomial())
summary(fit) #display results
write.csv(coefficients(summary(fit)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_index_coeff.csv")
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
fit_full <- glm(BACS_BIN~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=binomial())
summary(fit_full) #display results
#export coeff to csv
write.csv(coefficients(summary(fit_full)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_2f_full_coeff.csv")
boxplot(BACS_BIN~HabQIndex, data=habq_survey, main="Habitat Quality Index at BACS Sites", xlab="BACS Presence", ylab="Habitat Quality Index")
boxplot(HabQIndex~BACS_BIN, data=habq_survey, main="Habitat Quality Index at BACS Sites", xlab="BACS Presence", ylab="Habitat Quality Index")
q()
head(habq)
head(habq)
utils:::menuInstallPkgs()
habq <- read.table("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality.csv", header=TRUE, sep=",")
head(habq)
#add column with binary BACS presence
habq["BACS_BIN"] <- ifelse(habq$TOTBACS > 0, 1,0)
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURVEY==0),]
habq_survey$BA <- factor(habq_survey$BA)
habq_survey$FIRE <- factor(habq_survey$FIRE)
habq_survey$WIRE <- factor(habq_survey$WIRE)
habq_survey$FORB <- factor(habq_survey$FORB)
habq_survey$WOOD <- factor(habq_survey$WOOD)
habq_survey$BARE <- factor(habq_survey$BARE)
habq_survey$MIDHARD <- factor(habq_survey$MIDHARD)
#import table
habq <- read.table("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality.csv", header=TRUE, sep=",")
#view header of data
#head(habq)
#scatterplot matrix
#pairs(~TOTBACS+Main_HABQ+NOSURVEY+INSUFHAB+HabQIndex,data=habq,main="Habitat Quality Scatterplot Matrix")
#boxplot comparing habitat quality measures
#reorder hab levels to display in boxplot properly
#habq$Main_HABQ <- factor(habq$Main_HABQ, levels = c("No Habitat","Poor", "Fair", "Good", "Excellent"))
#boxplot(HabQIndex~Main_HABQ,data=habq, main="Hab Quality Index vs. Hab Quality Eval", xlab="Hab Quality Eval", ylab="HabQIndex")
#add column with binary BACS presence
habq["BACS_BIN"] <- ifelse(habq$TOTBACS > 0, 1,0)
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURVEY==0),]
#import table
habq <- read.table("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality.csv", header=TRUE, sep=",")
#view header of data
#head(habq)
#scatterplot matrix
#pairs(~TOTBACS+Main_HABQ+NOSURVEY+INSUFHAB+HabQIndex,data=habq,main="Habitat Quality Scatterplot Matrix")
#boxplot comparing habitat quality measures
#reorder hab levels to display in boxplot properly
#habq$Main_HABQ <- factor(habq$Main_HABQ, levels = c("No Habitat","Poor", "Fair", "Good", "Excellent"))
#boxplot(HabQIndex~Main_HABQ,data=habq, main="Hab Quality Index vs. Hab Quality Eval", xlab="Hab Quality Eval", ylab="HabQIndex")
#add column with binary BACS presence
habq["BACS_BIN"] <- ifelse(habq$TOTBACS > 0, 1,0)
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURVEY==0),]
#alternate method - pulls out subset, and returns only specified columns
#habq_survey <- subset(habq, NOSURVEY==0 | INSUFHAB==0, select=c(POINTID,QQUAD,TOTBACS, HabQIndex))
#boxplot
#boxplot(HabQIndex~BACS_BIN, data=habq_survey, main="BACS Presence by Habitat Quality Index", xLab="BACS Presence", yLab="Habitat Quality Index")
#logistic regression
#fit <- glm(BACS_BIN~HabQIndex, data=habq_survey, family=binomial())
#summary(fit) #display results
#export coeff to csv
#write.csv(coefficients(summary(fit)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_index_coeff.csv")
#boxplot(HabQIndex~BACS_BIN, data=habq_survey, main="Habitat Quality Index at BACS Sites", xlab="BACS Presence", ylab="Habitat Quality Index")
#confint(fit) #95% CI for coefficients
#predict(fit, type="response") #predicted values
#residuals(fit, type="deviance") #residuals
#poission regression on TOTBACS
#fitp <- glm(TOTBACS~HabQIndex, data=habq_survey, family=poisson())
#summary(fitp)
#############################################################################
#re-factor habitat variables to be 2 factors instead of 3
#create factor permutations
f2<- c("0","1")
write.csv(expand.grid(f2, f2, f2, f2, f2, f2, f2), file="C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality2Factor.csv")
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
#factorize BA,FIRE,WIRE,FORB,WOOD,BARE,MIDHARD
habq_survey$BA <- factor(habq_survey$BA)
habq_survey$FIRE <- factor(habq_survey$FIRE)
habq_survey$WIRE <- factor(habq_survey$WIRE)
habq_survey$FORB <- factor(habq_survey$FORB)
habq_survey$WOOD <- factor(habq_survey$WOOD)
habq_survey$BARE <- factor(habq_survey$BARE)
habq_survey$MIDHARD <- factor(habq_survey$MIDHARD)
head(habq_survey)
ls()
search()
rm(list=ls(all=TRUE))
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
q()
library(beanplot)
# library(stringr) #string manipulation
# library(MASS) #model comparison - stepAIC
# library(leaps) #another model comparison library
#set working directory
setwd("C:/data/@projects/bacs_surveys/analysis/bacs_statistics/")
#import data from exel (Access export)
habq <- read.table("BACSHabData.csv", header=TRUE, sep=",")
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURV==0),]
habq_survey$OBS <- factor(habq_survey$OBS)
#############################################################################
#re-factor habitat variables to be 2 factors instead of 3
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
#create factor permutations, export grid to csv
#only have to do this once...
#f2<- c("0","1")
#write.csv(expand.grid(f2, f2, f2, f2, f2, f2, f2), file="HabQuality2Factor.csv")
#############################################################################
#GLM ANALYSIS
#full model - export coeff to csv
#fit_full <- glm(BACSBIN~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=binomial())
#summary(fit_full) #display results
#write.csv(coefficients(summary(fit_full)), file="habq_2f_full_coeff.csv")
# 
#habitat characteristics where BACS Found
# habq_bacs <- subset(habq_survey, TOTBACS>0,select=c(TOTBACS, BACS_BIN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HabQIndex))
# habq_nobacs <- subset(habq_survey, TOTBACS==0,select=c(TOTBACS, BACS_BIN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HabQIndex))
# pairs(~TOTBACS+HabQIndex+jitter(BA)+jitter(FIRE)+jitter(WIRE)+jitter(BARE), data=habq_survey, main="Habitat Variables & BACS Detections")
# hist(habq_bacs$HabQIndex)
# hist(habq_nobacs$HabQIndex)
#############################################################################
#############################################################################
#############################################################################
#begin analysis of sites using Site-Occupancy
library("R2WinBUGS") #to run winBUGS. Requires 'coda' package
library(reshape)
library(coda)
bugs.dir = "C:/WinBUGS14/"
bacs <- na.omit(subset(habq_2factor, ,select=c(PASS, ACTIVE, JULIAN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HABQI, HABQ2, TMIDMIN, OBS,POINTID)))#only those sites surveyed, and with habitat quality index
#function for converting continuous to scaled variable
#input: vector output:vector of converted values
stand <- function(x) {
mean <- mean(x, na.rm=TRUE)
#mean <- mean(x)
sd <- sd(x[!is.na(x)])
#sd <- sd(x)
vals <- (x-mean)/sd
result <- list(vals=vals, mean=mean, sd=sd)
return(result)
}
# destand <- function(x, m, s) {
# #reverse standardization back to original values
# vals<- (x-m)/s
# return(vals)
# }
y<-as.matrix(bacs[,1:2])#detection data for passive and active listening periods
y[y>0]<-1#convert to binary (detection/non-detection)
active<- y#indicator for passive vs. active 
active[,1]<-0
active[,2]<-1
# habqi<-bacs$HABQI#hab quality index
# mean.habqi<-mean(habqi, na.rm=TRUE)
# sd.habqi<-sd(habqi)
#qqplot(habqi, rnorm(nrow(habqi),mean = mean(habqi), sd=sd(habqi))) #assess normality of habqi distribution
#beanplot(BACSBIN~HABQI,data=habq_survey)#beanplot (boxplot alternative) of habitat quality index vs. BACS detection
#TODO - Add in time of day effect including quadratic
#TODO - add in observer effect
#standardize dates
dates<-stand(bacs$JULIAN)#julian day of the year
DATES <- dates$vals
#standardize times
times<- stand(bacs$TMIDMIN)
TIMES <- times$vals
ba<-bacs2$TOTBACS
#import data from exel (Access export)
bacs2 <- na.omit(read.table("qHabQualityExport_ActivePassive.csv", header=TRUE, sep=","))
bacs2<-bacs2[!(is.na(bacs2$TOTBACS) | bacs2$TOTBACS==""), ]
ba<-bacs2$TOTBACS
boxplot(ba[ba==0],ba[ba==1],ba[ba==2],ba[ba==3],ba[ba==4],ba[ba==5])
boxplot(c(0,1,2,3,4,5)~ba)
hist(ba)
min(bacs2$JULIAN)
sum(y)
length(y)
nrow(y)
library(beanplot)
# library(stringr) #string manipulation
# library(MASS) #model comparison - stepAIC
# library(leaps) #another model comparison library
#set working directory
setwd("C:/data/@projects/bacs_surveys/analysis/bacs_statistics/")
#import data from exel (Access export)
habq <- read.table("BACSHabData.csv", header=TRUE, sep=",")
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURV==0),]
habq_survey$OBS <- factor(habq_survey$OBS)
#############################################################################
#re-factor habitat variables to be 2 factors instead of 3
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
#create factor permutations, export grid to csv
#only have to do this once...
#f2<- c("0","1")
#write.csv(expand.grid(f2, f2, f2, f2, f2, f2, f2), file="HabQuality2Factor.csv")
#############################################################################
#GLM ANALYSIS
#full model - export coeff to csv
#fit_full <- glm(BACSBIN~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=binomial())
#summary(fit_full) #display results
#write.csv(coefficients(summary(fit_full)), file="habq_2f_full_coeff.csv")
# 
#habitat characteristics where BACS Found
# habq_bacs <- subset(habq_survey, TOTBACS>0,select=c(TOTBACS, BACS_BIN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HabQIndex))
# habq_nobacs <- subset(habq_survey, TOTBACS==0,select=c(TOTBACS, BACS_BIN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HabQIndex))
# pairs(~TOTBACS+HabQIndex+jitter(BA)+jitter(FIRE)+jitter(WIRE)+jitter(BARE), data=habq_survey, main="Habitat Variables & BACS Detections")
# hist(habq_bacs$HabQIndex)
# hist(habq_nobacs$HabQIndex)
#############################################################################
#############################################################################
#############################################################################
#begin analysis of sites using Site-Occupancy
library("R2WinBUGS") #to run winBUGS. Requires 'coda' package
library(reshape)
library(coda)
bugs.dir = "C:/WinBUGS14/"
bacs <- na.omit(subset(habq_2factor, ,select=c(PASS, ACTIVE, JULIAN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HABQI, HABQ2, TMIDMIN, OBS, POINTID)))#only those sites surveyed, and with habitat quality index
#function for converting continuous to scaled variable
#input: vector output:vector of converted values
stand <- function(x) {
mean <- mean(x, na.rm=TRUE)
#mean <- mean(x)
sd <- sd(x[!is.na(x)])
#sd <- sd(x)
vals <- (x-mean)/sd
result <- list(vals=vals, mean=mean, sd=sd)
return(result)
}
# destand <- function(x, m, s) {
# #reverse standardization back to original values
# vals<- (x-m)/s
# return(vals)
# }
y<-as.matrix(bacs[,1:2])#detection data for passive and active listening periods
y[y>0]<-1#convert to binary (detection/non-detection)
active<- y#indicator for passive vs. active 
active[,1]<-0
active[,2]<-1
# habqi<-bacs$HABQI#hab quality index
# mean.habqi<-mean(habqi, na.rm=TRUE)
# sd.habqi<-sd(habqi)
#qqplot(habqi, rnorm(nrow(habqi),mean = mean(habqi), sd=sd(habqi))) #assess normality of habqi distribution
#beanplot(BACSBIN~HABQI,data=habq_survey)#beanplot (boxplot alternative) of habitat quality index vs. BACS detection
#TODO - Add in time of day effect including quadratic
#TODO - add in observer effect
#standardize dates
dates<-stand(bacs$JULIAN)#julian day of the year
DATES <- dates$vals
#standardize times
times<- stand(bacs$TMIDMIN)
TIMES <- times$vals
#factorize observers
obs<-factor(bacs$OBS)
# habitat quality index
habqi<-bacs$HABQI
# habqi<-bacs$HABQ2 #alternative scoring
#Habitat variables
BA<-as.numeric(bacs$BA)
FIRE<-as.numeric(bacs$FIRE)
WIRE<-as.numeric(bacs$WIRE)
WOOD<-as.numeric(bacs$WOOD)
FORB<-as.numeric(bacs$FORB)
BARE<-as.numeric(bacs$BARE)
MIDHARD<-as.numeric(bacs$MIDHARD)
boxplot(BA,FIRE,WIRE)
boxplot(BA)
plot(BA, FIRE, WIRE, WOOD, FORB, BARE)
plotbacs <- na.omit(subset(habq_2factor, ,select=c(PASS, ACTIVE, JULIAN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HABQI, HABQ2, TMIDMIN, OBS, POINTID, TOTBACS)))#only those sites surveyed, and with habitat quality index
#function for converting continuous to scaled variable
#input: vector output:vector of converted values
stand <- function(x) {
mean <- mean(x, na.rm=TRUE)
#mean <- mean(x)
sd <- sd(x[!is.na(x)])
#sd <- sd(x)
vals <- (x-mean)/sd
result <- list(vals=vals, mean=mean, sd=sd)
return(result)
}
# destand <- function(x, m, s) {
# #reverse standardization back to original values
# vals<- (x-m)/s
# return(vals)
# }
y<-as.matrix(bacs[,1:2])#detection data for passive and active listening periods
y[y>0]<-1#convert to binary (detection/non-detection)
active<- y#indicator for passive vs. active 
active[,1]<-0
active[,2]<-1
# habqi<-bacs$HABQI#hab quality index
# mean.habqi<-mean(habqi, na.rm=TRUE)
# sd.habqi<-sd(habqi)
#qqplot(habqi, rnorm(nrow(habqi),mean = mean(habqi), sd=sd(habqi))) #assess normality of habqi distribution
#beanplot(BACSBIN~HABQI,data=habq_survey)#beanplot (boxplot alternative) of habitat quality index vs. BACS detection
#TODO - Add in time of day effect including quadratic
#TODO - add in observer effect
#standardize dates
dates<-stand(bacs$JULIAN)#julian day of the year
DATES <- dates$vals
#standardize times
times<- stand(bacs$TMIDMIN)
TIMES <- times$vals
#factorize observers
obs<-factor(bacs$OBS)
# habitat quality index
habqi<-bacs$HABQI
# habqi<-bacs$HABQ2 #alternative scoring
#Habitat variables
BA<-as.numeric(bacs$BA)
FIRE<-as.numeric(bacs$FIRE)
WIRE<-as.numeric(bacs$WIRE)
WOOD<-as.numeric(bacs$WOOD)
FORB<-as.numeric(bacs$FORB)
BARE<-as.numeric(bacs$BARE)
MIDHARD<-as.numeric(bacs$MIDHARD)
length(BA)
tb<-bacs$TOTBACS
plot(tb~BA)
tb
bacs$TOTBACS
habq_bacs <- subset(habq_survey, TOTBACS>0,select=c(TOTBACS, BACS_BIN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HabQIndex))
habq_nobacs <- subset(habq_survey, TOTBACS==0,select=c(TOTBACS, BACS_BIN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HabQIndex))
habq$TOTBACS
bacs$TOTBACS
#set working directory
setwd("C:/data/@projects/bacs_surveys/analysis/bacs_statistics/")
#import data from exel (Access export)
habq <- read.table("BACSHabData.csv", header=TRUE, sep=",")
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURV==0),]
habq_survey$OBS <- factor(habq_survey$OBS)
#############################################################################
#re-factor habitat variables to be 2 factors instead of 3
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
#create factor permutations, export grid to csv
#only have to do this once...
#f2<- c("0","1")
#write.csv(expand.grid(f2, f2, f2, f2, f2, f2, f2), file="HabQuality2Factor.csv")
#############################################################################
#GLM ANALYSIS
#full model - export coeff to csv
#fit_full <- glm(BACSBIN~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=binomial())
#summary(fit_full) #display results
#write.csv(coefficients(summary(fit_full)), file="habq_2f_full_coeff.csv")
# 
#habitat characteristics where BACS Found
habq_bacs <- subset(habq_survey, TOTBACS>0,select=c(TOTBACS, BACS_BIN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HabQIndex))
habq_nobacs <- subset(habq_survey, TOTBACS==0,select=c(TOTBACS, BACS_BIN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HabQIndex))
# pairs(~TOTBACS+HabQIndex+jitter(BA)+jitter(FIRE)+jitter(WIRE)+jitter(BARE), data=habq_survey, main="Habitat Variables & BACS Detections")
# hist(habq_bacs$HabQIndex)
# hist(habq_nobacs$HabQIndex)
#############################################################################
#############################################################################
#############################################################################
#begin analysis of sites using Site-Occupancy
library("R2WinBUGS") #to run winBUGS. Requires 'coda' package
library(reshape)
library(coda)
bugs.dir = "C:/WinBUGS14/"
bacs <- na.omit(subset(habq_2factor, ,select=c(PASS, ACTIVE, JULIAN, BA, FIRE, WIRE, FORB, WOOD, BARE, MIDHARD, HABQI, HABQ2, TMIDMIN, OBS, POINTID, TOTBACS)))#only those sites surveyed, and with habitat quality index
#function for converting continuous to scaled variable
#input: vector output:vector of converted values
stand <- function(x) {
mean <- mean(x, na.rm=TRUE)
#mean <- mean(x)
sd <- sd(x[!is.na(x)])
#sd <- sd(x)
vals <- (x-mean)/sd
result <- list(vals=vals, mean=mean, sd=sd)
return(result)
}
# destand <- function(x, m, s) {
# #reverse standardization back to original values
# vals<- (x-m)/s
# return(vals)
# }
y<-as.matrix(bacs[,1:2])#detection data for passive and active listening periods
y[y>0]<-1#convert to binary (detection/non-detection)
active<- y#indicator for passive vs. active 
active[,1]<-0
active[,2]<-1
# habqi<-bacs$HABQI#hab quality index
# mean.habqi<-mean(habqi, na.rm=TRUE)
# sd.habqi<-sd(habqi)
#qqplot(habqi, rnorm(nrow(habqi),mean = mean(habqi), sd=sd(habqi))) #assess normality of habqi distribution
#beanplot(BACSBIN~HABQI,data=habq_survey)#beanplot (boxplot alternative) of habitat quality index vs. BACS detection
#TODO - Add in time of day effect including quadratic
#TODO - add in observer effect
#standardize dates
dates<-stand(bacs$JULIAN)#julian day of the year
DATES <- dates$vals
#standardize times
times<- stand(bacs$TMIDMIN)
TIMES <- times$vals
#factorize observers
obs<-factor(bacs$OBS)
# habitat quality index
habqi<-bacs$HABQI
# habqi<-bacs$HABQ2 #alternative scoring
#Habitat variables
BA<-as.numeric(bacs$BA)
FIRE<-as.numeric(bacs$FIRE)
WIRE<-as.numeric(bacs$WIRE)
WOOD<-as.numeric(bacs$WOOD)
FORB<-as.numeric(bacs$FORB)
BARE<-as.numeric(bacs$BARE)
MIDHARD<-as.numeric(bacs$MIDHARD)
bacs$TOTBACS
plot(bacs$TOTBACS~bacs$BA)
q()
