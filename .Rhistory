.First()
.First
First
First()
R
help(unmarked)
??unmarked
chooseCRANmirror()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
q()
ls()
ls(habq_survey)
# first row contains variable names, comma is separator 
# assign the variable id to row names
# note the / instead of \ on mswindows systems 
#import table
habq <- read.table("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality.csv", header=TRUE, sep=",")
#view header of data
head(habq)
#scatterplot matrix
#pairs(~TOTBACS+Main_HABQ+NOSURVEY+INSUFHAB+HabQIndex,data=habq,main="Habitat Quality Scatterplot Matrix")
#boxplot comparing habitat quality measures
habq$Main_HABQ <- factor(habq$Main_HABQ, levels = c("No Habitat","Poor", "Fair", "Good", "Excellent"))
boxplot(HabQIndex~Main_HABQ,data=habq, main="Hab Quality Index vs. Hab Quality Eval", xlab="Hab Quality Eval", ylab="HabQIndex")
#add column with binary BACS presence
habq["BACS_BIN"] <- ifelse(habq$TOTBACS > 0, 1,0)
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURVEY==0),]
#alternate method - pulls out subset, and returns only specified columns
#habq_survey <- subset(habq, NOSURVEY==0 | INSUFHAB==0, select=c(POINTID,QQUAD,TOTBACS, HabQIndex))
#boxplot
boxplot(HabQIndex~BACS_BIN, data=habq_survey, main="BACS Presence by Habitat Quality Index", xLab="BACS Presence", yLab="Habitat Quality Index")
#logistic regression
fit <- glm(BACS_BIN~HabQIndex, data=habq_survey, family=binomial())
summary(fit) #display results
#confint(fit) #95% CI for coefficients
#predict(fit, type="response") #predicted values
#residuals(fit, type="deviance") #residuals
#poission regression on TOTBACS
#fitp <- glm(TOTBACS~HabQIndex, data=habq_survey, family=poisson())
#summary(fitp)
######################################################################
#factorize BA,FIRE,WIRE,FORB,WOOD,BARE,MIDHARD
#then investigate which of these is influential in BACS presence
#scatterplot of BACS presence and 7 variables - not very informative
#pairs(~BACS_BIN+BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_survey, main="BACS Presence & Habitat Variables")
habq_survey["FBA"] <- factor(habq_survey$BA)
habq_survey["FFIRE"] <- factor(habq_survey$FIRE)
habq_survey["FWIRE"] <- factor(habq_survey$WIRE)
habq_survey["FFORB"] <- factor(habq_survey$FORB)
habq_survey["FWOOD"] <- factor(habq_survey$WOOD)
habq_survey["FBARE"] <- factor(habq_survey$BARE)
habq_survey["FMIDHARD"] <- factor(habq_survey$MIDHARD)
habq_factors <- subset(habq_survey,,select=c(TOTBACS, BACS_BIN, FBA, FFIRE, FWIRE, FFORB, FWOOD, FBARE, FMIDHARD, HabQIndex))
fit_full <- glm(BACS_BIN~FBA+FFIRE+FWIRE+FFORB+FWOOD+FBARE+FMIDHARD, data=habq_factors, family=binomial())
summary(fit) #display results
fit_fire <- glm(BACS_BIN~FFIRE, data=habq_factors, family=binomial())
fit_wire <- glm(BACS_BIN~FWIRE, data=habq_factors, family=binomial())
fit_fire_wire_ba <- glm(BACS_BIN~FFIRE+FWIRE+FBA, data=habq_factors, family=binomial())
fit_fire_wire_bare <- glm(BACS_BIN~FFIRE+FWIRE+FBARE, data=habq_factors, family=binomial())
fit_fire_wire_bare_midhard <- glm(BACS_BIN~FFIRE+FWIRE+FBARE+FMIDHARD, data=habq_factors, family=binomial())
fit_HQI <- glm(BACS_BIN~HabQIndex, data=habq_factors, family=binomial())
AIC(fit_full, fit_fire, fit_wire, fit_fire_wire_ba, fit_fire_wire_bare, fit_fire_wire_bare_midhard)
#controversial model comparison - stepwise variable selection based on AIC values
library(MASS)
step <- stepAIC(fit_full, direction="both")
#alternative method comparing all possible regressions
#explanation: http://www.stat.columbia.edu/~martin/W2024/R10.pdf
#install.packages("leaps")
library(leaps)
leaps = regsubsets(BACS_BIN~FBA+FFIRE+FWIRE+FFORB+FWOOD+FBARE+FMIDHARD, data=habq_factors, nbest=15)
plot(leaps, scale="adjr2")
plot(leaps, scale="aic")
#alternative 2: stepwise comparing r-squared values
null = glm(BACS_BIN~1, data=habq_factors, family=binomial())
step(null, scope=list(lower=null, upper=fit_full), direction="forward") #forward
step(fit_full, data=habq_factors,direction="backward") #backward 
#habitat characteristics where BACS Found
habq_bacs <- subset(habq_survey, TOTBACS>0,select=c(TOTBACS, BACS_BIN, FBA, FFIRE, FWIRE, FFORB, FWOOD, FBARE, FMIDHARD, HabQIndex))
habq_nobacs <- subset(habq_survey, TOTBACS==0,select=c(TOTBACS, BACS_BIN, FBA, FFIRE, FWIRE, FFORB, FWOOD, FBARE, FMIDHARD, HabQIndex))
hist(habq_bacs$HabQIndex)
hist(habq_nobacs$HabQIndex)
##############################################################################
#restrict data to only those sites with sufficient habitat - do the relationships hold?
summary(habq_survey)
utils:::menuInstallPkgs()
library(plyr)
qquad_counts <- ddply(habq_survey, 
habq_survey["FQQUAD]<- factor(habq_survey$QQUAD)
)
habq_survey["FQQUAD"]<- factor(habq_survey$QQUAD)
qquad_counts <- ddply(habq_survey, .(FQQUAD), sumarize, freq=length(FQQUAD))
qquad_counts <- ddply(habq_survey, .(FQQUAD), summarize, freq=length(FQQUAD))
qquad_counts
hist(qquad_counts$freq)
fit<- glm(BACS_BIN~FBA + FFIRE+ FWIRE+FBARE, fit_win <- glm(BACS_BIN~FBA+FFIRE+FWIRE+FBARE, data=habq_factors, family=binomial())
fit_win <- glm(BACS_BIN~FBA+FFIRE+FWIRE+FBARE, data=habq_factors, family=binomial())
summary(fit_win)
write.csv("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQualityRExport.csv", row.names=1)
write.csv(habq_survey, file="C:/data/@projects/bacs_surveys/analysis/heat_map/HabQualityRExport.csv", row.names=1)
write.csv(habq_survey, file="C:/data/@projects/bacs_surveys/analysis/heat_map/HabQualityRExport.csv")
factors <- expand.grid(habq_survey$FBA, habq_survey$FFIRE, habq_survey$FWIRE, habq_survey$FBARE)
factors <- expand.grid(habq_survey$BA, habq_survey$FIRE, habq_survey$WIRE, habq_survey$BARE)
ddply(habq_survey, .(FBA, FFIRE, FWIRE, FBARE))
expand.grid(c("00","01","10"),c("00","01","10"))
expand.grid(c("00","01","10"),c("00","01","10"),c("00","01","10"),c("00","01","10"))
write.csv(expand.grid(c("00","01","10"),c("00","01","10"),c("00","01","10"),c("00","01","10"), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/HabQualFactors.csv")
)
write.csv(expand.grid(c("00","01","10"),c("00","01","10"),c("00","01","10"),c("00","01","10")), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/HabQualFactors.csv")
plot(jitter(habq_survey$BACS_BIN),jitter(habq_survey$BA))
hist(habq_survey$BA)
hist(habq_survey$FIRE)
hist(habq_survey$WIRE)
hist(habq_survey$BARE)
boxplot(TOTBACS~BA, data=habq_survey, main="Stand Density (BA) and Num BACS")
pairs(~TOTBACS+HabQIndex+BA+FIRE+WIRE+BARE, data=habq_survey, main="Habitat Variables & BACS Detections")
pairs(~TOTBACS+HabQIndex+jitter(BA)+jitter(FIRE)+jitter(WIRE)+jitter(BARE), data=habq_survey, main="Habitat Variables & BACS Detections")
pairs(~TOTBACS+HabQIndex+jitter(BA)+jitter(FIRE)+jitter(WIRE)+jitter(BARE), data=habq_survey, main="Habitat Variables & BACS Detections")
habq_test<-habq_survey
habq$BA <- ifelse(habq_test$BA<=1,0,1)
habq_test$BA <- ifelse(habq_test$BA<=1,0,1)
head(habq_test, n=20)
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<1,0,1))
fit_full <- glm(BACS_BIN~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=binomial())
summary(fit_full) #display results
#controversial model comparison - stepwise variable selection based on AIC values
library(MASS)
step <- stepAIC(fit_full, direction="both")
pfit_full <- glm(TOTBACS~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=poisson())
summary(pfit_full) #display results
f2<- c("0","1")
write.csv(expand.grid(f2, f2, f2, f2, f2, f2, f2), file="C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality2Factor.csv")
write.csv(fit_full, file=C:/data/@projects/bacs_surveys/analysis/heat_map/habq_2f_full_coeff.csv")
write.csv(fit_full, file="C:/data/@projects/bacs_surveys/analysis/heat_map/habq_2f_full_coeff.csv")
write.csv(fit_full$coefficients, file="C:/data/@projects/bacs_surveys/analysis/heat_map/habq_2f_full_coeff.csv")
write.csv(fit_full$summary, file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_2f_full_coeff.csv")
write.csv(coeff(summary(fit_full)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_2f_full_coeff.csv")
write.csv(coefficients(summary(fit_full)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_2f_full_coeff.csv")
q()
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
fit_full <- glm(BACS_BIN~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=binomial())
summary(fit_full) #display results
habq <- read.table("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality.csv", header=TRUE, sep=",")
habq["BACS_BIN"] <- ifelse(habq$TOTBACS > 0, 1,0)
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURVEY==0),]
#logistic regression
fit <- glm(BACS_BIN~HabQIndex, data=habq_survey, family=binomial())
summary(fit) #display results
write.csv(coefficients(summary(fit)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_index_coeff.csv")
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
fit_full <- glm(BACS_BIN~BA+FIRE+WIRE+FORB+WOOD+BARE+MIDHARD, data=habq_2factor, family=binomial())
summary(fit_full) #display results
#export coeff to csv
write.csv(coefficients(summary(fit_full)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_2f_full_coeff.csv")
boxplot(BACS_BIN~HabQIndex, data=habq_survey, main="Habitat Quality Index at BACS Sites", xlab="BACS Presence", ylab="Habitat Quality Index")
boxplot(HabQIndex~BACS_BIN, data=habq_survey, main="Habitat Quality Index at BACS Sites", xlab="BACS Presence", ylab="Habitat Quality Index")
q()
head(habq)
head(habq)
utils:::menuInstallPkgs()
habq <- read.table("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality.csv", header=TRUE, sep=",")
head(habq)
#add column with binary BACS presence
habq["BACS_BIN"] <- ifelse(habq$TOTBACS > 0, 1,0)
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURVEY==0),]
habq_survey$BA <- factor(habq_survey$BA)
habq_survey$FIRE <- factor(habq_survey$FIRE)
habq_survey$WIRE <- factor(habq_survey$WIRE)
habq_survey$FORB <- factor(habq_survey$FORB)
habq_survey$WOOD <- factor(habq_survey$WOOD)
habq_survey$BARE <- factor(habq_survey$BARE)
habq_survey$MIDHARD <- factor(habq_survey$MIDHARD)
#import table
habq <- read.table("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality.csv", header=TRUE, sep=",")
#view header of data
#head(habq)
#scatterplot matrix
#pairs(~TOTBACS+Main_HABQ+NOSURVEY+INSUFHAB+HabQIndex,data=habq,main="Habitat Quality Scatterplot Matrix")
#boxplot comparing habitat quality measures
#reorder hab levels to display in boxplot properly
#habq$Main_HABQ <- factor(habq$Main_HABQ, levels = c("No Habitat","Poor", "Fair", "Good", "Excellent"))
#boxplot(HabQIndex~Main_HABQ,data=habq, main="Hab Quality Index vs. Hab Quality Eval", xlab="Hab Quality Eval", ylab="HabQIndex")
#add column with binary BACS presence
habq["BACS_BIN"] <- ifelse(habq$TOTBACS > 0, 1,0)
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURVEY==0),]
#import table
habq <- read.table("C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality.csv", header=TRUE, sep=",")
#view header of data
#head(habq)
#scatterplot matrix
#pairs(~TOTBACS+Main_HABQ+NOSURVEY+INSUFHAB+HabQIndex,data=habq,main="Habitat Quality Scatterplot Matrix")
#boxplot comparing habitat quality measures
#reorder hab levels to display in boxplot properly
#habq$Main_HABQ <- factor(habq$Main_HABQ, levels = c("No Habitat","Poor", "Fair", "Good", "Excellent"))
#boxplot(HabQIndex~Main_HABQ,data=habq, main="Hab Quality Index vs. Hab Quality Eval", xlab="Hab Quality Eval", ylab="HabQIndex")
#add column with binary BACS presence
habq["BACS_BIN"] <- ifelse(habq$TOTBACS > 0, 1,0)
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURVEY==0),]
#alternate method - pulls out subset, and returns only specified columns
#habq_survey <- subset(habq, NOSURVEY==0 | INSUFHAB==0, select=c(POINTID,QQUAD,TOTBACS, HabQIndex))
#boxplot
#boxplot(HabQIndex~BACS_BIN, data=habq_survey, main="BACS Presence by Habitat Quality Index", xLab="BACS Presence", yLab="Habitat Quality Index")
#logistic regression
#fit <- glm(BACS_BIN~HabQIndex, data=habq_survey, family=binomial())
#summary(fit) #display results
#export coeff to csv
#write.csv(coefficients(summary(fit)), file="C:/data/@projects/bacs_surveys/analysis/heat_map/r/habq_index_coeff.csv")
#boxplot(HabQIndex~BACS_BIN, data=habq_survey, main="Habitat Quality Index at BACS Sites", xlab="BACS Presence", ylab="Habitat Quality Index")
#confint(fit) #95% CI for coefficients
#predict(fit, type="response") #predicted values
#residuals(fit, type="deviance") #residuals
#poission regression on TOTBACS
#fitp <- glm(TOTBACS~HabQIndex, data=habq_survey, family=poisson())
#summary(fitp)
#############################################################################
#re-factor habitat variables to be 2 factors instead of 3
#create factor permutations
f2<- c("0","1")
write.csv(expand.grid(f2, f2, f2, f2, f2, f2, f2), file="C:/data/@projects/bacs_surveys/analysis/heat_map/HabQuality2Factor.csv")
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
#factorize BA,FIRE,WIRE,FORB,WOOD,BARE,MIDHARD
habq_survey$BA <- factor(habq_survey$BA)
habq_survey$FIRE <- factor(habq_survey$FIRE)
habq_survey$WIRE <- factor(habq_survey$WIRE)
habq_survey$FORB <- factor(habq_survey$FORB)
habq_survey$WOOD <- factor(habq_survey$WOOD)
habq_survey$BARE <- factor(habq_survey$BARE)
habq_survey$MIDHARD <- factor(habq_survey$MIDHARD)
head(habq_survey)
ls()
search()
rm(list=ls(all=TRUE))
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
q()
bacs
#load R Libraries
library(beanplot)
# library(MASS) #model comparison - stepAIC
# library(leaps) #another model comparison library
#set working directory
setwd("C:/data/@projects/bacs_surveys/analysis/heat_map/r/")
#import data from exel (Access export)
habq <- read.table("BACSHabData.csv", header=TRUE, sep=",")
#create a subset with surveyed locations only
habq_survey <- habq[ which(habq$NOSURV==0),]
habq_survey$OBS <- factor(habq_survey$OBS)
#############################################################################
#re-factor habitat variables to be 2 factors instead of 3
habq_2factor <- habq_survey
habq_2factor$BA <- factor(ifelse(habq_2factor$BA<=1,0,1))
habq_2factor$FIRE <- factor(ifelse(habq_2factor$FIRE<1,0,1))
habq_2factor$WIRE <- factor(ifelse(habq_2factor$WIRE<=1,0,1))
habq_2factor$BARE <- factor(ifelse(habq_2factor$BARE<1,0,1))
habq_2factor$FORB <- factor(ifelse(habq_2factor$FORB<1,0,1))
habq_2factor$WOOD <- factor(ifelse(habq_2factor$WOOD<1,0,1))
habq_2factor$MIDHARD <- factor(ifelse(habq_2factor$MIDHARD<=1,0,1))
library("R2WinBUGS") #to run winBUGS. Requires 'coda' package
library(reshape)
library(coda)
bugs.dir = "C:/WinBUGS14/"
bacs <- na.omit(subset(habq_2factor, ,select=c(PASS, ACTIVE, JULIAN, HABQI)))#only those sites surveyed, and with habitat quality index
bacsdet <- sum(bacs$BACSBIN)
bacsdet
bacs$BACSBIN
bacs
bacsdet<-sum(bacs_survey$BACSBIN)
bacs_2factor
bacsdet<-sum(habq_2factor$BACSBIN)
bacsdet
y<-as.matrix(bacs[,1:2])#detection data for passive and active listening periods
y[y>0]<-1#convert to binary (detection/non-detection)
active<- y#indicator for passive vs. active 
active[,1]<-0
active[,2]<-1
habqi<-bacs$HABQI#hab quality index
mean.habqi<-mean(habqi, na.rm=TRUE)
sd.habqi<-sd(habqi)
#qqplot(habqi, rnorm(nrow(habqi),mean = mean(habqi), sd=sd(habqi))) #assess normality of habqi distribution
#beanplot(BACSBIN~HABQI,data=habq_survey)#beanplot (boxplot alternative) of habitat quality index vs. BACS detection
#TODO - Add in time Effet including quadratic
#TODO - add in date quadratic effect
dates<-bacs$JULIAN#julian day of the year
#standardize dates
mean.date<-mean(dates,na.rm=TRUE)
sd.date<-sd(dates[!is.na(dates)])
DATES<-(dates-mean.date)/sd.date#standardize
DATES[is.na(DATES)]<-0#impute zeroes(means)
# Specify model in BUGS language
# this is a simple model accounting for date in detection probability and habitat quality index for occupancy probability
sink("model.txt")
cat("
model {
# Priors
alpha.psi ~ dnorm(0, 0.01)#intercept occupancy
beta.psi ~ dnorm(0, 0.01)#hab quailty index occupancy
alpha.p ~ dnorm(0, 0.01)#intercept detection
beta1.p ~ dnorm(0, 0.01)#date effect detection
beta2.p ~ dnorm(0, 0.01)#active effect detection
# Likelihood
# Ecological model for the partially observed true state
for (i in 1:R) {
   z[i] ~ dbern(psi[i])                # True occurrence z at site i
   psi[i] <- 1 / (1 + exp(-lpsi.lim[i]))
   lpsi.lim[i] <- min(999, max(-999, lpsi[i]))
   lpsi[i] <- alpha.psi + beta.psi * habqi[i]
   # Observation model for the observations
   for (j in 1:T) {
      y[i,j] ~ dbern(mu.p[i,j])# Detection-nondetection at i and j
      mu.p[i,j] <- z[i] * p[i,j]
      p[i,j] <- 1 / (1 + exp(-lp.lim[i,j]))
      lp.lim[i,j] <- min(999, max(-999, lp[i,j]))
      lp[i,j] <- alpha.p + beta1.p * DATES[i] + beta2.p * active[i,j]
      } #j
   } #i
# Derived quantities
occ.fs <- sum(z[])                             # Number of occupied sites
mean.p <- exp(alpha.p) / (1 + exp(alpha.p))    # Sort of average detection
}
",fill = TRUE)
sink()
# Bundle data
win.data <- list(y = y, R = nrow(y), T = ncol(y), habqi = habqi, DATES = DATES, active=active)
# Initial values
zst <- apply(y, 1, max, na.rm = TRUE)# Good starting values crucial
inits <- function(){list(z = zst, alpha.psi=runif(1, -3, 3), alpha.p = runif(1, -3, 3), beta.psi=runif(1,-3,3), beta1.p=runif(1,-3,3),beta2.p=runif(1,-3,3))}
# Parameters monitored
params <- c("alpha.psi", "beta.psi", "mean.p", "occ.fs", "alpha.p", "beta1.p", "beta2.p")
# MCMC settings
ni <- 30000
nt <- 10
nb <- 20000
nc <- 3
# Call WinBUGS from R (BRT < 1 min)
out <- bugs(win.data, inits, params, "model.txt", n.chains = nc, 
n.thin = nt, n.iter = ni, n.burnin = nb, debug = TRUE, bugs.directory = bugs.dir, working.directory = getwd())
q()
# Summarize posteriors
print(out, dig = 2)
write.csv(out$summary, file="bacs_site_occ.csv")
#Predict effect of Hab quality index with uncertainty - THIS NEEDS MODIFICATION
mcmc.sample <- out$n.sims
original.habqi.pred <- seq(min(habqi), max(habqi), by=1)#generate a sequence of values that matches possible habqi values
#date.pred <- (original.date.pred - mean.date)/sd.date#example of normalization above
habqi.pred <- original.habqi.pred#not normalized above
psi.pred.habqi <- plogis(out$mean$alpha.psi + out$mean$beta.psi * habqi.pred )
array.psi.pred.habqi <- array(NA, dim = c(length(habqi.pred), mcmc.sample))
for (i in 1:mcmc.sample){
   array.psi.pred.habqi[,i] <- plogis(out$sims.list$alpha.psi[i] + out$sims.list$beta.psi[i] * habqi.pred)
   }
# Plot for a subsample of MCMC draws
sub.set <- sort(sample(1:mcmc.sample, size = 200))
par(mfrow = c(2, 1))
plot(original.habqi.pred, psi.pred.habqi, main = "", ylab = "Occupancy probability", xlab = "Habitat Quality Index", ylim = c(0, 1),xlim=c(1,17), type = "l", lwd = 3, frame.plot = FALSE)
for (i in sub.set){
   lines(original.habqi.pred, array.psi.pred.habqi[,i], type = "l", lwd = 1, col = "gray")
   }
lines(original.habqi.pred, psi.pred.habqi, type = "l", lwd = 3, col = "blue")
plot(original.habqi.pred, psi.pred.habqi, main = "", ylab = "Occupancy probability", xlab = "Habitat Quality Index", ylim = c(0, 1),xlim=c(1,17), type = "l", lwd = 3, frame.plot = FALSE)
for (i in sub.set){
   lines(original.habqi.pred, array.psi.pred.habqi[,i], type = "l", lwd = 1, col = "gray")
   }
lines(original.habqi.pred, psi.pred.habqi, type = "l", lwd = 3, col = "blue")
#active vs passive detection probability
par(mfrow = c(2, 1))
hist(plogis(out$sims.list$alpha.p), nclass = 40, col = "gray", main = "Passive Listening", xlab = "Detection probability", xlim = c(0, 1))
hist(plogis(out$sims.list$alpha.p+ out$sims.list$beta2.p), nclass = 40, col = "gray", main = "Active Playback", xlab = "Detection probability", xlim = c(0, 1))
q()
